@using Newtonsoft.Json.Linq
@using System.Resources

@using Cms.Controllers
@using Library.Classes
@using Library.Helpers
@using Library.Models
@using Library.Resources
@using System.IO
@using System.Web.Hosting
@model Article_Content
@{
	Layout = null;
	
	//Get image Options	
	string jsonOptionString = (Model.Text != null) ? Model.Text : "{'size': 'medium'}";
	JObject jsonImageOptions = JObject.Parse(jsonOptionString);
	ImageConfig.Image imageOptions = jsonImageOptions.ToObject<ImageConfig.Image>();
	
	//Get Image Settings
	const string JsonSettingsFile = "Library\\Config\\ImageSettings.json";
	string settingsPath = Path.Combine(new DirectoryInfo(HostingEnvironment.MapPath("~/")).Parent.FullName, @JsonSettingsFile);

	//When options are empty, set standard config settings
	string urlString = (imageOptions.url != null) ? imageOptions.url.Split('/').Last() : "";
	string jsonImageSettingsString = (urlString != "") ? FileController.GetImageSettings("Images", urlString).settings : File.ReadAllText(settingsPath);
	JObject jsonImageSettings = JObject.Parse(jsonImageSettingsString.Replace("s.", "s_"));
	ImageSettings imageSettings = jsonImageSettings.ToObject<ImageSettings>();

	imageOptions.size = (imageSettings.size != null) ? imageSettings.size : imageOptions.size;
	
	//Get Image Config
	const string JsonConfigFile = "Library\\Config\\ImageConfig.json";
	string configPath = Path.Combine(new DirectoryInfo(HostingEnvironment.MapPath("~/")).Parent.FullName, @JsonConfigFile);

	string jsonString = File.ReadAllText(configPath);
	JObject jsonSettings = JObject.Parse(jsonString);

	ImageConfig.ImageObject imageConfig = jsonSettings.ToObject<ImageConfig.ImageObject>();		
 }



<div class="panel panel-default">
@using (Html.BeginCollectionItem("Article_Content"))
{
	@Html.HiddenFor(m => m.Id)
	@Html.HiddenFor(m => m.Article_Id)
	@Html.HiddenFor(m => m.Action)
	@Html.HiddenFor(m => m.Controller)
	@Html.HiddenFor(m => m.Creation_Date)
	@Html.HiddenFor(m => m.Created_By)
	@Html.HiddenFor(m => m.Active)
	@Html.HiddenFor(m => m.Level)
	@Html.HiddenFor(m => m.Text)
	
	<div class="panel-heading collapsed" role="tab" id="headingImage_@Model.Id" data-toggle="collapse" data-target="#collapseImage_@Model.Id">
		<div class="dragHandle">:::</div>
		<div class="row no-gutter">
			<div class="col-xs-1 col-md-1">
				<h4 class="panel-title">@Model.Action</h4>
			</div>
			<div class="col-xs-8 col-md-8">
				<h4 class="panel-title">
					<a href="#collapseImage_@Model.Id" aria-expanded="true" aria-controls="collapseImage_@Model.Id">
						@Html.TextBoxFor(m => m.Title, new {@class = "form-control" })
					</a>
				</h4>
			</div>
			<div class="col-xs-3 col-md-3">
				<div class="btn-group pull-right" role="group" aria-label="...">
					<div class="btn-group" role="group">
						<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
							@Translate.Options
							<span class="caret"></span>
						</button>
						<ul class="dropdown-menu pull-right" role="menu">
							<li><a href="#">@Translate.NotAvailable</a></li>
						</ul>
					</div>
					<button type="button" class="btn btn-default glyphicon glyphicon-trash"></button>
				</div>
			</div>
		</div>
	</div>
	<div id="collapseImage_@Model.Id" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingImage_@Model.Id">
		<div class="panel-body form-horizontal">
			
			@*Html.ImgTag(url,"").WithDensities(2, 3).WithSize(100, 40)*@


			<div class="row no-gutter">

				<div class="col-xs-6 col-md-5">
					@if (imageOptions.url != "") { 
					
						<img src="~/@imageOptions.url" style="width:100%" />
						
						<div class="progress" data-toggle="tooltip" data-placement="bottom" title="test">
							<div class="progress-bar empty" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"></div>
						</div>
					}
					else
					{
						<div class="highlight empty dropzone">
							<div class="fallback">	
								@Html.TextBox("test", "", new { Type = "file" })
							</div>
						</div>
					}
				</div>
				<div class="col-xs-6 col-md-7">

					<div class="panel-group" id="collapseSettings_@Model.Id" role="tablist" aria-multiselectable="true">
						<div class="panel panel-default">
							<div class="panel-heading" role="tab" data-toggle="collapse" data-parent="#somethingelse_@Model.Id" data-target="#collapseSettingsImage_@Model.Id">
								<h4 class="panel-title">@Html.DisplayNameFor(m => imageConfig.image)</h4>
							</div>
							<div id="collapseSettingsImage_@Model.Id" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingSettingsImage_@Model.Id">
								<div class="panel-body form-horizontal">
									@Html.EditorFor(m => imageConfig.image, imageOptions)
								</div>
							</div>
						</div>

						<div class="panel panel-default">
							<div class="panel-heading" role="tab" data-toggle="collapse" data-parent="#collapseSettings_@Model.Id" data-target="#collapseSettingsColor_@Model.Id">
								<h4 class="panel-title">@Html.DisplayNameFor(m => imageConfig.color)</h4>
							</div>
							<div id="collapseSettingsColor_@Model.Id" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingSettingsColor_@Model.Id">
								<div class="panel-body form-horizontal">
									@Html.EditorFor(m => imageConfig.color, imageSettings)
								</div>
							</div>
						</div>

						<div class="panel panel-default">
							<div class="panel-heading" role="tab" data-toggle="collapse" data-parent="#collapseSettings_@Model.Id" data-target="#collapseSettingsFilters_@Model.Id">
								<h4 class="panel-title">@Html.DisplayNameFor(m => imageConfig.filters)</h4>
							</div>
							<div id="collapseSettingsFilters_@Model.Id" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingSettingsFilters_@Model.Id">
								<div class="panel-body form-horizontal">
									@Html.EditorFor(m => imageConfig.filters, imageSettings)
								</div>
							</div>
						</div>

						<div class="panel panel-default">
							<div class="panel-heading" role="tab" data-toggle="collapse" data-parent="#collapseSettings_@Model.Id" data-target="#collapseSettingsTransform_@Model.Id">
								<h4 class="panel-title">@Html.DisplayNameFor(m => imageConfig.transform)</h4>
							</div>
							<div id="collapseSettingsTransform_@Model.Id" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingSettingsTransform_@Model.Id">
								<div class="panel-body form-horizontal">
									@Html.EditorFor(m => imageConfig.transform, imageSettings)
								</div>
							</div>
						</div>

						<div class="panel panel-default">
							<div class="panel-heading" role="tab" data-toggle="collapse" data-parent="#collapseSettings_@Model.Id" data-target="#collapseSettingsWatermark_@Model.Id">
								<h4 class="panel-title">@Html.DisplayNameFor(m => imageConfig.watermark)</h4>
							</div>
							<div id="collapseSettingsWatermark_@Model.Id" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingSettingsWatermark_@Model.Id">
								<div class="panel-body form-horizontal">
									@Html.EditorFor(m => imageConfig.watermark, imageSettings)
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
				@*Html.TextAreaFor(m => m.Text)*@
		</div>
	</div>
}

	<script>
		require(['article-content-image'], function(app){
			console.log('start image settings');
			app.model('@Model.Id');
			app.message('@Html.Raw(Translate.FileUploadEmpty)');
			app.maxfilesize(@ConfigClass.Settings.controllers.files.image.maxFileSize);
			app.start();
		});
	</script>


	<script>
		/*(function (){
			var articleContentImage = Class.create({
				init: function(options){
					// Variables
					this.timeout = null;
					this.maxFiles = options.maxFiles || 1;
					this.maxFileSize = options.maxFilesize || 3;
					this.message = options.message || '';

					// Elements
					this.panel = $(options.panel) || null;

					// Bindings
					this.triggerTimeout = this.triggerTimeout.bind(this);
					this.triggerImageChange = this.triggerImageChange.bind(this);

					// Functions
					this.setEvents();
					this.setDropZone();
				},
				setEvents: function(){
					this.panel.on('change', "input[name*=imageConfig]", this.triggerTimeout);
				},
				setDropZone: function(){
					this.panel.find('.dropzone').dropzone(
						{
							url: '/File/SaveImage',
							maxFilesize: this.maxFileSize,
							maxFiles: this.maxFiles,
							acceptedFiles: 'image/*',
							dictDefaultMessage: this.message
						}
					);
				},
				triggerTimeout: function(){
					clearTimeout(this.timeout);
					this.timeout = setTimeout(this.triggerImageChange, 3000);
				},
				triggerImageChange: function(e){
					console.info("BOEM!!");
				}
			});


			// Onload
			new new articleContentImage(
				{
					panel : '#collapseImage_//AT//Model.Id',
					maxFileSize : //AT//ConfigClass.Settings.controllers.files.image.maxFileSize,
					message: '//AT//Html.Raw(Translate.FileUploadEmpty)'
				}
			);

		})();
		*/
		/*
		(function () {
			function onLoad(){
				var panel = $('#collapseImage_Model.Id');
				loadDropZone(panel);
				bootstrapSlider(panel);
				triggerImageChange(panel);
			}

			function loadDropZone(panel) {

				panel.find('.dropzone').dropzone(
					{
						url: '/File/SaveImage',
						maxFilesize: ConfigClass.Settings.controllers.files.image.maxFileSize,
						maxFiles: 1,
						acceptedFiles: 'image/*',
						dictDefaultMessage: 'Html.Raw(Translate.FileUploadEmpty)'
					}
				);
			}

			function bootstrapSlider(panel){
				panel.find('.slider').bootstrapSlider();
			}

			function triggerImageChange(panel){
				panel.on('change', "input[name*=imageConfig]", executeImageChange.bind(panel));
			}


			function executeImageChange(e){
				var test = form2js({rootNode: this.get(0), skipEmpty: true,useIdIfEmptyName: false});
				test.imageConfig.custom = true;


				var repl = new RegExp("\\_", "gm");

				console.info(test.imageConfig);
				console.info($.param(test.imageConfig).replace(repl,"."));
				//console.info(e,this);
			}

			if (window.jQuery !== undefined) {
				//onLoad();
			} else {
				//window.onload = onLoad;
			}
		}
		)();*/
	</script>
</div>

	


